@inherits LayoutComponentBase

@inject IJSRuntime jsRuntimeService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject NavigationManager navigationManager

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Class='mainlayout-topbar' Fixed Dense Elevation="0">
        <AuthorizeView>
            <MudText Class='mainlayout-topbar__tbxpagetitle'>@GlobalClass.pageTitle</MudText>
            <MudSpacer/>
            <div class="usercp">
                <MudExpansionPanels Class='usercp__expansionpanel-header' DisableBorders='userCPborderVal' Elevation='userCPElevationVal'>
                    <MudExpansionPanel Class='usercp__expansionpanel' IsExpandedChanged='ToggleUserCP' Style='@userCPExpPanelStyleStr'>
                        <TitleContent>
                            <div class='d-flex usercp__infocontainer' style='@userCPInfoStyleStr'>
                                @if(!dataFetched) 
                                {
                                    <MudSkeleton class='usercp__skeletonavatar' SkeletonType='SkeletonType.Circle' Animation='Animation.Wave' Height='40px' Width='40px'/>
                                    <div>
                                        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Animation='Animation.Wave' Height='40px' Width='160px'/>
                                    </div>
                                }
                                else
                                {
                                    <MudAvatar Class='usercp__avatar' Image='@($"data:image/png;base64, {Convert.ToBase64String(@GlobalClass.currentUserAccount.Picture)}")'/>
                                    <div>
                                        <MudText Class='usercp__lblusername'>@GlobalClass.currentUserAccount.FirstName</MudText>
                                        <MudText Class='usercp__lbldesignation'>@Extensions.GetEnumDescription(GlobalClass.currentUserAccount.AccessLevel)</MudText>
                                    </div>
                                }
                            </div>
                            </TitleContent>
                            <ChildContent>
                                <div><hr class='horizline'></div>
                                <MudContainer Class='d-flex usercp__btncontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
                                    <MudButton Class='usercp__btnsettings' Href='/configurations' Variant='Variant.Text' StartIcon='@Icons.Filled.Settings' Size='Size.Medium'>Settings</MudButton>
                                    <MudSpacer/>
                                    <MudButton Class='usercp__btntohub' Variant='Variant.Text' StartIcon='@Icons.Filled.ExitToApp' Size='Size.Medium'>Back to Hub</MudButton>
                                </MudContainer>
                                <div><hr class='horizline'></div>
                                <MudButton Class='usercp__btnlogout' Variant='Variant.Filled' StartIcon='@Icons.Filled.Logout' Color='Color.Error'>Log Out</MudButton>
                            </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </div>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Class='mainlayout-drawer' @bind-Open="_drawerOpen" Fixed Elevation='0' Variant='@DrawerVariant.Mini' OpenMiniOnHover='false'>
        <MudDrawerHeader Class='mainlayout-drawer__header'>
            <MudIconButton OnClick="@((e) => DrawerToggle())" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
            <MudText Class='mainlayout-drawer__header-text'>ATTENDANCE SYSTEM</MudText>
        </MudDrawerHeader>
        <AuthorizeView>
            <Authorized>
                <MudNavMenu>
                    <MudNavLink Href='/dashboard' Match="NavLinkMatch.All" Icon="@Icons.Filled.Dashboard">
                        <MudText Class='fweight500 pt-1' Typo='Typo.body2'>DASHBOARD</MudText>
                    </MudNavLink>
                     <MudNavLink Href='/test1' Match="NavLinkMatch.All" Icon="@Icons.Filled.Dashboard">
                        <MudText Class='fweight500 pt-1' Typo='Typo.body2'>TEST</MudText>
                    </MudNavLink>
                </MudNavMenu>
                <MudNavGroup Title="Schedule" Icon="@Icons.Filled.CalendarViewWeek">
                    <MudNavLink Href="/schedule/schedules" Icon="@Icons.Filled.LibraryBooks">Schedule List</MudNavLink>
                    <MudNavLink Href="/schedule/new" Icon="@Icons.Filled.Queue">New Schedule</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Leave" Icon="@Icons.Custom.Uncategorized.FolderOpen">
                    <MudNavLink Href="/leaves/leaverequests" Icon="@Icons.Filled.Comment">Leave Requests</MudNavLink>
                    <MudNavLink Href="/leaves/leave-types" Icon="@Icons.Outlined.InsertComment">Leave Types</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Settings" Icon="@Icons.Filled.Settings">
                    <MudNavLink Href="/settings/general" Icon="@Icons.Filled.DisplaySettings">General</MudNavLink>
                    <MudNavLink Href="/settings/signatories" Icon="@Icons.Filled.AccountCircle">Signatories</MudNavLink>
                    <MudNavLink Href="/settings/holidays" Icon="@Icons.Filled.CalendarMonth">Holidays</MudNavLink>
                    <MudNavLink Href="/settings/locations" Icon="@Icons.Filled.LocationOn">Locations</MudNavLink>
                </MudNavGroup>
            </Authorized>
            <NotAuthorized>
                <MudNavMenu Class='pb-2'>
                    <MudNavLink Class='txt-uppercase' Href='http://10.0.0.7:8000' Match='NavLinkMatch.All' Icon='@Icons.Filled.Home'>
                    Back To Hub
                    </MudNavLink>
                </MudNavMenu>
           </NotAuthorized>
        </AuthorizeView>
    </MudDrawer>
    <MudMainContent>
        <div class='mainlayout-body overflow-hidden'>
            @Body
        </div>
    </MudMainContent>
    <MudAppBar Class='mainlayout-footerbar' Fixed='true' Elevation='0' Dense='true' Bottom='true'>
        <MudText>
            v1.0.0.1
        </MudText>
        <MudIconButton Class='mainlayout-footerbar__btn-hardreload' OnClick='RefreshPage' Icon='@Icons.Material.Filled.Refresh' aria-label='Refresh Page'>
        </MudIconButton>
        <MudSpacer />
        <MudText>
            <div @ref='timeElement'></div>
        </MudText>
        <MudIconButton Class='mainlayout-footerbar__btn-fullscreen' OnClick='ToggleFullScreen' Icon='@Icons.Material.Filled.Fullscreen' aria-label='Toggle Full Screen'>
        </MudIconButton>
    </MudAppBar>
</MudLayout>

@code {
    bool _drawerOpen = true, dataFetched, _isFullScreen, userCPborderVal, userCPOpen;
    private int userCPElevationVal = 0;
    string updateStyleStr = string.Empty, userCPExpPanelStyleStr = "background-color: #fafafa;", userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
    ElementReference timeElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntimeService.InvokeVoidAsync("startTime", timeElement);
    }
    protected override async Task OnInitializedAsync()
    {
        Console.Write("Mainlayout initialized");
        CompletedFetch();
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleUserCP()
    {
        userCPOpen = !userCPOpen;
        if (userCPOpen) {
            userCPborderVal = false;
            userCPElevationVal = 1;
            userCPExpPanelStyleStr = "background: color: white;";
            userCPInfoStyleStr = "width: 250px;";
        } else if (!userCPOpen) {
            userCPborderVal = true;
            userCPElevationVal = 0;
            userCPExpPanelStyleStr = "background-color: #fafafa;";
            userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
        }
    }

    private async void RefreshPage()
    {
        await jsRuntimeService.InvokeVoidAsync("HardReload");
    }

    private async void ToggleFullScreen()
    {
        if(!_isFullScreen) {
            await jsRuntimeService.InvokeVoidAsync("openFullScreen");
            _isFullScreen = !_isFullScreen;
        } else {
             await jsRuntimeService.InvokeVoidAsync("closeFullScreen");
            _isFullScreen = !_isFullScreen;
        }
    }
}
